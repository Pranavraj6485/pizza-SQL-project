-- retrieve the total number of order placed
use pizzahut;
SELECT 
    COUNT(order_id) AS total_orderplaced
FROM
    orders;

-- Calculate the total revenue generated from pizza sales

SELECT 
    SUM(p.price * o.quantity) AS total_revenue
FROM
    pizzas p
        INNER JOIN
    order_details o ON p.pizza_id = o.pizza_id;

-- Identify the highest-priced pizza.

SELECT 
    pizza_type_id,price
FROM
    pizzas
WHERE
    price = (SELECT 
            MAX(price)
        FROM
            pizzas)

-- Identify the most common pizza size ordered.


SELECT 
    p.size, COUNT(o.quantity) AS total_orders
FROM
    pizzas p
        INNER JOIN
    order_details o ON p.pizza_id = o.pizza_id
GROUP BY p.size
ORDER BY total_orders DESC
LIMIT 1

-- List the top 5 most ordered pizza types along with their quantities.

select * from order_details;
select * from pizza_types;
select * from pizzas;
SELECT 
    pizza_types.name,
    SUM(order_details.quantity) AS total_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY total_quantity DESC
LIMIT 5

- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    p1.category, COUNT(o.quantity) AS total
FROM
    pizzas p
        INNER JOIN
    order_details o ON o.pizza_id = p.pizza_id
        JOIN
    pizza_types p1 ON p.pizza_type_id = p1.pizza_type_id
GROUP BY p1.category

-- Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(o2.time) AS time, COUNT(o2.order_id) AS total_orders
FROM
    order_details o1
        INNER JOIN
    orders o2 ON o1.order_id = o2.order_id
GROUP BY HOUR(o2.time)

-- Join relevant tables to find the category-wise distribution of pizzas.

  SELECT 
    category, COUNT(name)
FROM
    pizza_types
GROUP BY category
-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(quantity)) as average_number
FROM
    (SELECT 
        o1.date, COUNT(o2.quantity) AS quantity
    FROM
        orders o1
    INNER JOIN order_details o2 ON o1.order_id = o2.order_id
    GROUP BY o1.date) AS order_quantity

-- Determine the top 3 most ordered pizza types based on revenue.

select p1.name,round(sum((p.price * o.quantity))) as revenue from pizzas p inner join  order_details o
on o.pizza_id=p.pizza_id join pizza_types p1
on p.pizza_type_id=p1.pizza_type_id
group by p1.name
order by revenue desc
limit 3

-- Calculate the percentage contribution of each pizza type to total revenue.
SELECT 
    p1.category,
    ROUND(SUM(p.price * o.quantity * 100) / (SELECT 
                    SUM(p.price * o.quantity) AS total_revenue
                FROM
                    pizzas p
                        INNER JOIN
                    order_details o ON p.pizza_id = o.pizza_id)) AS percentage
FROM
    pizzas p
        INNER JOIN
    order_details o ON o.pizza_id = p.pizza_id
        JOIN
    pizza_types p1 ON p.pizza_type_id = p1.pizza_type_id
GROUP BY p1.category

-- Analyze the cumulative revenue generated over time.

select date, sum(revenue) over(order by date) as cumm_revenue from
(select o2.date,round(sum((o1.quantity*p.price))) as revenue from order_details o1 inner join orders o2 on
o1.order_id=o2.order_id join  pizzas p on 
o1.pizza_id=p.pizza_id
group by o2.date) as sales

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select name , revenue from 
(select name, category,revenue, rank() 
over(partition by category order by revenue desc) as rn from
(select p1.name,p1.category,
round(sum((p.price * o.quantity))) as revenue
ankitemployees from pizzas p inner join  order_details o
on o.pizza_id=p.pizza_id join pizza_types p1
on p.pizza_type_id=p1.pizza_type_id
group by p1.name,p1.category) as total) as ranking
where rn<4;
